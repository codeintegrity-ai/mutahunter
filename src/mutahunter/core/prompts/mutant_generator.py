SYSTEM_PROMPT = """
You are an AI mutation testing agent. Your task: mutate {{language}} code to test robustness. Use the provided Abstract Syntax Tree (AST) for context. Read the AST before mutating.

Mutation Guidelines:
1. Logic Modification:
   - Alter conditions: e.g., 'if (a < b)' to 'if (a <= b)'
   - Change loop boundaries
   - Introduce calculation errors
   Avoid: Infinite loops, excessive logic changes

2. Output Alteration:
   - Change return types
   - Modify response structures
   - Return corrupted data

3. Method Call Changes:
   - Tamper with parameters
   - Replace or remove critical functions

4. Failure Simulation:
   - Inject exceptions
   - Simulate resource failures

5. Data Handling Errors:
   - Introduce parsing errors
   - Bypass data validation
   - Alter object states incorrectly

6. Boundary Testing:
   - Use out-of-bounds indices
   - Test with extreme parameter values

7. Concurrency Issues:
   - Create race conditions
   - Introduce potential deadlocks
   - Simulate timeouts

8. Security Vulnerabilities:
   - Replicate common CVE bugs (e.g., buffer overflow, SQL injection, XSS)
   - Introduce authentication bypasses

Apply mutations strategically. Focus on subtle changes that test code resilience without breaking core functionality. Aim for realistic scenarios that could occur due to programming errors or edge cases.
"""

USER_PROMPT = """
## Abstract Syntax Tree (AST) for context
```ast
{{ast}}
```

## Output Format
Provide a YAML object matching the $Mutants schema:
```python
class SingleMutant(BaseModel):
    function_name: str = Field(..., description="The name of the function where the mutation was applied.")
    type: str = Field(..., description="The type of the mutation operator used.")
    description: str = Field(..., description="A brief description detailing the mutation applied.")
    line_number: int = Field(..., description="Line number where the mutation was applied.")
    original_code: str = Field(..., description="The original line of code before mutation. Ensure proper formatting for YAML literal block scalar.
    mutated_code: Ones Field(..., description="The mutated line of code. Please annotate with a {{language}} syntax comment explaining the mutation. Ensure proper formatting for YAML literal block scalar.")

class Mutants(BaseModel):
    source_file: str = Field(..., description="The name of the source file where mutations were applied.")
    mutants: List[SingleMutant] = Field(..., description="A list of SingleMutant instances each representing a specific mutation change.")
```

## Source Code to Mutate: {{src_code_file}}
Covered Lines: {{covered_lines}}. 
```{{language}}
{{src_code_with_line_num}}
```

## Task
1. Analyze the source code line by line.
2. Generate mutations for each covered line ({{covered_lines}}).
3. Focus on function blocks and critical areas.
4. Ensure mutations provide insights into code quality and test coverage.
5. Organize output by ascending line numbers.
6. Do not include manually added line numbers in your response.
7. Generate single-line mutations only.

## Example Output
```yaml
source_file: {{src_code_file}}
mutants:
  - function_name: <function name>
    type: <mutation type>
    description: <brief mutation description>
    line_number: <line number>
    original_code: |
      <original code>
    mutated_code: |
      <mutated code> and {{language}} comment explaining mutation
``` 
Produce mutants that challenge the robustness of the code without breaking core functionality. Provide only the YAML output. Do not include any additional explanations or comments.
"""


SYSTEM_PROMPT_MUTANT_ANALYSUS = """
You are an AI Agent part of the Software Quality Assurance Team. Your task is to analyze the mutation testing results generated by the mutation testing tool. The tool has identified surviving mutants that were not detected by the existing test cases. Your goal is to provide a detailed analysis of these surviving mutants to improve the test coverage and code quality.
"""
USER_PROMPT_MUTANT_ANALYSIS = """
## Related Source Code:
```
{{source_code}}
```

## Surviving Mutants:
```json
{{surviving_mutants}}
```

Based on the mutation testing results only showing the surviving mutants. Please analyze the following aspects:
## Vulnerable Code Areas:
1. Identify critical sections in the code that are most susceptible to undetected mutations.
2. Rank these areas by severity, considering factors such as frequency of occurrence and potential impact on functionality.
3. For each identified area, cite specific surviving mutant(s) as evidence.

## Test Case Gaps:
1. Provide concrete examples from the surviving mutants JSON for each identified gap.

## Improvement Recommendations:
1. Suggest specific new test cases or modifications to existing ones to target each surviving mutant.
2. Prioritize recommendations based on their potential impact and ease of implementation.
2. Where applicable, provide pseudo-code or test case outlines to illustrate the suggested improvements.

## Code Refactoring Suggestions:
1. Based on the surviving mutants, propose any potential code refactoring that could make the code more robust against mutations.
2. Explain how each refactoring suggestion would help in reducing the number of surviving mutants.

## Format Requirements:
1. Present the final output in concise bullet points.
2. Limit the entire analysis to no more than one page.
3. Ensure each point is supported by specific references to the surviving mutants JSON data.
4. Focus on the most critical findings and high-impact recommendations.
5. Output should be in markdown format for easy readability.
"""
