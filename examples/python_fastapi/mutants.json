[
    {
        "id": "1",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/1_app.py",
        "status": "KILLED",
        "error_msg": "__________________________________ test_root ___________________________________\n\n    def test_root():\n        \"\"\"\n        Test the root endpoint by sending a GET request to \"/\" and checking the response status code and JSON body.\n        \"\"\"\n        response = client.get(\"/\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"Welcome to the FastAPI application!\"}\nE       AssertionError: assert None == {'message': 'Welcome to the FastAPI application!'}\nE        +  where None = <bound method Response.json of <Response [200 OK]>>()\nE        +    where <bound method Response.json of <Response [200 OK]>> = <Response [200 OK]>.json\n\ntests/test_app.py:15: AssertionError",
        "type": "Alter Outputs",
        "description": "Return a null value instead of a dictionary.",
        "udiff": "--- \n+++ \n@@ -12,7 +12,8 @@\n     No parameters are passed into the function.\n\n     Returns a dictionary with a welcome message.\n\n     \"\"\"\n\n-    return {\"message\": \"Welcome to the FastAPI application!\"}\n\n+    return None  # Mutated: Changed return value to null instead of a dictionary.\n\n+\n\n \n\n \n\n @app.get(\"/current-date\")\n"
    },
    {
        "id": "2",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/2_app.py",
        "status": "KILLED",
        "error_msg": "__________________________________ test_root ___________________________________\n\n    def test_root():\n        \"\"\"\n        Test the root endpoint by sending a GET request to \"/\" and checking the response status code and JSON body.\n        \"\"\"\n        response = client.get(\"/\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"Welcome to the FastAPI application!\"}\nE       AssertionError: assert None == {'message': 'Welcome to the FastAPI application!'}\nE        +  where None = <bound method Response.json of <Response [200 OK]>>()\nE        +    where <bound method Response.json of <Response [200 OK]>> = <Response [200 OK]>.json\n\ntests/test_app.py:15: AssertionError",
        "type": "Remove Code Blocks",
        "description": "Remove the return statement, causing the function to return None implicitly.",
        "udiff": "--- \n+++ \n@@ -12,7 +12,8 @@\n     No parameters are passed into the function.\n\n     Returns a dictionary with a welcome message.\n\n     \"\"\"\n\n-    return {\"message\": \"Welcome to the FastAPI application!\"}\n\n+    # return {\"message\": \"Welcome to the FastAPI application!\"}  # Mutated: Removed return statement, function will return None implicitly.\n\n+\n\n \n\n \n\n @app.get(\"/current-date\")\n"
    },
    {
        "id": "3",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/3_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Alter Outputs",
        "description": "Return an incorrect date format.",
        "udiff": "--- \n+++ \n@@ -20,7 +20,8 @@\n     \"\"\"\n\n     Get the current date as an ISO-formatted string.\n\n     \"\"\"\n\n-    return {\"date\": date.today().isoformat()}\n\n+    return {\"date\": \"invalid-date-format\"}  # Mutated: Returned an incorrect date format.\n\n+\n\n \n\n \n\n @app.get(\"/add/{num1}/{num2}\")\n"
    },
    {
        "id": "4",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/4_app.py",
        "status": "KILLED",
        "error_msg": "...\n    raise exc\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/starlette/_exception_handler.py:53: in wrapped_app\n    await app(scope, receive, sender)\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/starlette/routing.py:72: in app\n    response = await func(request)\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:278: in app\n    raw_response = await run_endpoint_function(\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:191: in run_endpoint_function\n    return await dependant.call(**values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @app.get(\"/current-date\")\n    async def current_date():\n        \"\"\"\n        Get the current date as an ISO-formatted string.\n        \"\"\"\n>       return {\"date\": non_existent_function()}  # Mutated: Called a non-existent function to induce an exception.\nE       NameError: name 'non_existent_function' is not defined\n\napp.py:23: NameError",
        "type": "Modify Core Logic",
        "description": "Introduce an exception by calling a non-existent method.",
        "udiff": "--- \n+++ \n@@ -20,7 +20,8 @@\n     \"\"\"\n\n     Get the current date as an ISO-formatted string.\n\n     \"\"\"\n\n-    return {\"date\": date.today().isoformat()}\n\n+    return {\"date\": non_existent_function()}  # Mutated: Called a non-existent function to induce an exception.\n\n+\n\n \n\n \n\n @app.get(\"/add/{num1}/{num2}\")\n"
    },
    {
        "id": "5",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/5_app.py",
        "status": "KILLED",
        "error_msg": "___________________________________ test_add ___________________________________\n\n    def test_add():\n        response = client.get(\"/add/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 7}\nE       AssertionError: assert {'result': 8} == {'result': 7}\nE         \nE         Differing items:\nE         {'result': 8} != {'result': 7}\nE         Use -v to get more diff\n\ntests/test_app.py:75: AssertionError",
        "type": "Modify Core Logic",
        "description": "Introduce an off-by-one error in the addition logic.",
        "udiff": "--- \n+++ \n@@ -28,7 +28,8 @@\n     \"\"\"\n\n     An asynchronous function that takes two integer parameters 'num1' and 'num2', and returns a dictionary containing the result of adding 'num1' and 'num2' under the key 'result'.\n\n     \"\"\"\n\n-    return {\"result\": num1 + num2}\n\n+    return {\"result\": num1 + num2 + 1}  # Mutated: Introduced an off-by-one error in the addition logic.\n\n+\n\n \n\n \n\n @app.get(\"/subtract/{num1}/{num2}\")\n"
    },
    {
        "id": "6",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/6_app.py",
        "status": "KILLED",
        "error_msg": "___________________________________ test_add ___________________________________\n\n    def test_add():\n        response = client.get(\"/add/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 7}\nE       AssertionError: assert '7' == {'result': 7}\nE        +  where '7' = <bound method Response.json of <Response [200 OK]>>()\nE        +    where <bound method Response.json of <Response [200 OK]>> = <Response [200 OK]>.json\n\ntests/test_app.py:75: AssertionError",
        "type": "Alter Outputs",
        "description": "Change the return type to a string instead of a dictionary.",
        "udiff": "--- \n+++ \n@@ -28,7 +28,8 @@\n     \"\"\"\n\n     An asynchronous function that takes two integer parameters 'num1' and 'num2', and returns a dictionary containing the result of adding 'num1' and 'num2' under the key 'result'.\n\n     \"\"\"\n\n-    return {\"result\": num1 + num2}\n\n+    return str(num1 + num2)  # Mutated: Changed the return type to a string instead of a dictionary.\n\n+\n\n \n\n \n\n @app.get(\"/subtract/{num1}/{num2}\")\n"
    },
    {
        "id": "7",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/7_app.py",
        "status": "KILLED",
        "error_msg": "________________________________ test_subtract _________________________________\n\n    def test_subtract():\n        response = client.get(\"/subtract/10/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 6}\nE       AssertionError: assert {'result': 7} == {'result': 6}\nE         \nE         Differing items:\nE         {'result': 7} != {'result': 6}\nE         Use -v to get more diff\n\ntests/test_app.py:69: AssertionError",
        "type": "Modify Core Logic",
        "description": "Introduce an off-by-one error in the subtraction calculation.",
        "udiff": "--- \n+++ \n@@ -43,7 +43,8 @@\n     Returns:\n\n         dict: A dictionary containing the result of the subtraction.\n\n     \"\"\"\n\n-    return {\"result\": num1 - num2}\n\n+    return {\"result\": num1 - num2 + 1}  # Mutated: Introduced an off-by-one error in the subtraction calculation.\n\n+\n\n \n\n \n\n @app.get(\"/multiply/{num1}/{num2}\")\n"
    },
    {
        "id": "8",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/8_app.py",
        "status": "KILLED",
        "error_msg": "________________________________ test_subtract _________________________________\n\n    def test_subtract():\n        response = client.get(\"/subtract/10/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 6}\nE       AssertionError: assert '6' == {'result': 6}\nE        +  where '6' = <bound method Response.json of <Response [200 OK]>>()\nE        +    where <bound method Response.json of <Response [200 OK]>> = <Response [200 OK]>.json\n\ntests/test_app.py:69: AssertionError",
        "type": "Alter Outputs",
        "description": "Change the return type to a string instead of a dictionary.",
        "udiff": "--- \n+++ \n@@ -43,7 +43,8 @@\n     Returns:\n\n         dict: A dictionary containing the result of the subtraction.\n\n     \"\"\"\n\n-    return {\"result\": num1 - num2}\n\n+    return str(num1 - num2)  # Mutated: Changed the return type to a string instead of a dictionary.\n\n+\n\n \n\n \n\n @app.get(\"/multiply/{num1}/{num2}\")\n"
    },
    {
        "id": "9",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/9_app.py",
        "status": "KILLED",
        "error_msg": "________________________________ test_multiply _________________________________\n\n    def test_multiply():\n        response = client.get(\"/multiply/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 12}\nE       AssertionError: assert {'result': 15} == {'result': 12}\nE         \nE         Differing items:\nE         {'result': 15} != {'result': 12}\nE         Use -v to get more diff\n\ntests/test_app.py:63: AssertionError",
        "type": "Modify Core Logic",
        "description": "Introduce an off-by-one error in the multiplication calculation.",
        "udiff": "--- \n+++ \n@@ -58,7 +58,8 @@\n     Returns:\n\n     - dict: A dictionary containing the result of the multiplication.\n\n     \"\"\"\n\n-    return {\"result\": num1 * num2}\n\n+    return {\"result\": num1 * (num2 + 1)}  # Mutated: Introduced an off-by-one error in the multiplication calculation.\n\n+\n\n \n\n \n\n @app.get(\"/divide/{num1}/{num2}\")\n"
    },
    {
        "id": "10",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/10_app.py",
        "status": "KILLED",
        "error_msg": "________________________________ test_multiply _________________________________\n\n    def test_multiply():\n        response = client.get(\"/multiply/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 12}\nE       AssertionError: assert '12' == {'result': 12}\nE        +  where '12' = <bound method Response.json of <Response [200 OK]>>()\nE        +    where <bound method Response.json of <Response [200 OK]>> = <Response [200 OK]>.json\n\ntests/test_app.py:63: AssertionError",
        "type": "Alter Outputs",
        "description": "Change the return type to a string instead of a dictionary.",
        "udiff": "--- \n+++ \n@@ -58,7 +58,8 @@\n     Returns:\n\n     - dict: A dictionary containing the result of the multiplication.\n\n     \"\"\"\n\n-    return {\"result\": num1 * num2}\n\n+    return str(num1 * num2)  # Mutated: Changed the return type to a string instead of a dictionary.\n\n+\n\n \n\n \n\n @app.get(\"/divide/{num1}/{num2}\")\n"
    },
    {
        "id": "11",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/11_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Modify Core Logic",
        "description": "Alter the conditional check to allow division by zero.",
        "udiff": "--- \n+++ \n@@ -73,7 +73,7 @@\n     Raises:\n\n     - HTTPException with status code 400 if num2 is 0\n\n     \"\"\"\n\n-    if num2 == 0:\n\n+    if num2 <= 0:  # Mutated: Changed condition to allow division by zero.\n\n         raise HTTPException(status_code=400, detail=\"Cannot divide by zero\")\n\n     return {\"result\": num1 / num2}\n\n \n"
    },
    {
        "id": "12",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/12_app.py",
        "status": "KILLED",
        "error_msg": "_________________________________ test_divide __________________________________\n\n    def test_divide():\n        response = client.get(\"/divide/8/2\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 4.0}\nE       AssertionError: assert {'result': 'undefined'} == {'result': 4.0}\nE         \nE         Differing items:\nE         {'result': 'undefined'} != {'result': 4.0}\nE         Use -v to get more diff\n\ntests/test_app.py:57: AssertionError",
        "type": "Alter Outputs",
        "description": "Return a corrupted result structure.",
        "udiff": "--- \n+++ \n@@ -75,7 +75,8 @@\n     \"\"\"\n\n     if num2 == 0:\n\n         raise HTTPException(status_code=400, detail=\"Cannot divide by zero\")\n\n-    return {\"result\": num1 / num2}\n\n+    return {\"result\": \"undefined\"}  # Mutated: Returning a corrupted result instead of a valid number.\n\n+\n\n \n\n \n\n @app.get(\"/square/{number}\")\n"
    },
    {
        "id": "13",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/13_app.py",
        "status": "KILLED",
        "error_msg": "_________________________________ test_square __________________________________\n\n    def test_square():\n        response = client.get(\"/square/5\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 25}\nE       AssertionError: assert {'result': 26} == {'result': 25}\nE         \nE         Differing items:\nE         {'result': 26} != {'result': 25}\nE         Use -v to get more diff\n\ntests/test_app.py:45: AssertionError",
        "type": "Modify Core Logic",
        "description": "Alter the calculation to introduce an off-by-one error.",
        "udiff": "--- \n+++ \n@@ -83,7 +83,8 @@\n     \"\"\"\n\n     Return the square of a number.\n\n     \"\"\"\n\n-    return {\"result\": number**2}\n\n+    return {\"result\": number**2 + 1}  # Mutated: Introduced an off-by-one error in the calculation.\n\n+\n\n \n\n \n\n @app.get(\"/sqrt/{number}\")\n"
    },
    {
        "id": "14",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/14_app.py",
        "status": "KILLED",
        "error_msg": "_________________________________ test_square __________________________________\n\n    def test_square():\n        response = client.get(\"/square/5\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 25}\nE       AssertionError: assert {'value': 25} == {'result': 25}\nE         \nE         Left contains 1 more item:\nE         {'value': 25}\nE         Right contains 1 more item:\nE         {'result': 25}\nE         Use -v to get more diff\n\ntests/test_app.py:45: AssertionError",
        "type": "Alter Outputs",
        "description": "Change the return structure to omit the result key.",
        "udiff": "--- \n+++ \n@@ -83,7 +83,8 @@\n     \"\"\"\n\n     Return the square of a number.\n\n     \"\"\"\n\n-    return {\"result\": number**2}\n\n+    return {\"value\": number**2}  # Mutated: Changed the return structure to omit the result key.\n\n+\n\n \n\n \n\n @app.get(\"/sqrt/{number}\")\n"
    },
    {
        "id": "15",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/15_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Modify Core Logic",
        "description": "Alter the conditional check to allow negative numbers.",
        "udiff": "--- \n+++ \n@@ -91,7 +91,7 @@\n     \"\"\"\n\n     Return the square root of a number. Returns an error for negative numbers.\n\n     \"\"\"\n\n-    if number < 0:\n\n+    if number <= 0:  # Mutated: Changed condition to allow negative numbers.\n\n         raise HTTPException(\n\n             status_code=400, detail=\"Cannot take square root of a negative number\"\n\n         )\n"
    },
    {
        "id": "16",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/16_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Alter Outputs",
        "description": "Return a corrupted response structure.",
        "udiff": "--- \n+++ \n@@ -95,7 +95,8 @@\n         raise HTTPException(\n\n             status_code=400, detail=\"Cannot take square root of a negative number\"\n\n         )\n\n-    return {\"result\": math.sqrt(number)}\n\n+    return {\"result\": \"NaN\"}  # Mutated: Returning a corrupted result for square root of a number.\n\n+\n\n \n\n \n\n @app.get(\"/is-palindrome/{text}\")\n"
    },
    {
        "id": "17",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/17_app.py",
        "status": "KILLED",
        "error_msg": "______________________________ test_is_palindrome ______________________________\n\n    def test_is_palindrome():\n        response = client.get(\"/is-palindrome/radar\")\n        assert response.status_code == 200\n>       assert response.json() == {\"is_palindrome\": True}\nE       AssertionError: assert {'is_palindrome': False} == {'is_palindrome': True}\nE         \nE         Differing items:\nE         {'is_palindrome': False} != {'is_palindrome': True}\nE         Use -v to get more diff\n\ntests/test_app.py:33: AssertionError",
        "type": "Modify Core Logic",
        "description": "Alter the palindrome check to always return False.",
        "udiff": "--- \n+++ \n@@ -103,7 +103,8 @@\n     \"\"\"\n\n     Check if a string is a palindrome.\n\n     \"\"\"\n\n-    return {\"is_palindrome\": text == text[::-1]}\n\n+    return {\"is_palindrome\": False}  # Mutated: Always returns False for palindrome check.\n\n+\n\n \n\n \n\n @app.get(\"/days-until-new-year\")\n"
    },
    {
        "id": "18",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/18_app.py",
        "status": "KILLED",
        "error_msg": "...\n    await app(scope, receive, sender)\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/starlette/routing.py:72: in app\n    response = await func(request)\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:278: in app\n    raw_response = await run_endpoint_function(\n/Users/taikorind/.pyenv/versions/3.11.9/envs/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:191: in run_endpoint_function\n    return await dependant.call(**values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = 'radar'\n\n    @app.get(\"/is-palindrome/{text}\")\n    async def is_palindrome(text: str):\n        \"\"\"\n        Check if a string is a palindrome.\n        \"\"\"\n>       raise ValueError(\"Simulated failure\")  # Mutated: Introduced a runtime exception.\nE       ValueError: Simulated failure\n\napp.py:106: ValueError",
        "type": "Simulate Failures",
        "description": "Introduce a runtime exception when checking for palindrome.",
        "udiff": "--- \n+++ \n@@ -103,7 +103,8 @@\n     \"\"\"\n\n     Check if a string is a palindrome.\n\n     \"\"\"\n\n-    return {\"is_palindrome\": text == text[::-1]}\n\n+    raise ValueError(\"Simulated failure\")  # Mutated: Introduced a runtime exception.\n\n+\n\n \n\n \n\n @app.get(\"/days-until-new-year\")\n"
    },
    {
        "id": "19",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/19_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Modify Core Logic",
        "description": "Alter the calculation of days until New Year to introduce an off-by-one error.",
        "udiff": "--- \n+++ \n@@ -114,7 +114,8 @@\n     today = date.today()\n\n     next_new_year = date(today.year + 1, 1, 1)\n\n     delta = next_new_year - today\n\n-    return {\"days_until_new_year\": delta.days}\n\n+    return {\"days_until_new_year\": delta.days - 1}  # Mutated: Introduced an off-by-one error in the calculation.\n\n+\n\n \n\n \n\n @app.get(\"/echo/{message}\")\n"
    },
    {
        "id": "20",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/20_app.py",
        "status": "SURVIVED",
        "error_msg": "",
        "type": "Simulate Failures",
        "description": "Introduce a potential runtime exception by using an invalid date.",
        "udiff": "--- \n+++ \n@@ -112,7 +112,7 @@\n     Calculates the number of days until the next New Year.\n\n     \"\"\"\n\n     today = date.today()\n\n-    next_new_year = date(today.year + 1, 1, 1)\n\n+    next_new_year = date(today.year + 2, 1, 1)  # Mutated: Changed to an invalid future date to simulate failure.\n\n     delta = next_new_year - today\n\n     return {\"days_until_new_year\": delta.days}\n\n \n"
    },
    {
        "id": "21",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/21_app.py",
        "status": "KILLED",
        "error_msg": "__________________________________ test_echo ___________________________________\n\n    def test_echo():\n        response = client.get(\"/echo/hello\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"hello\"}\nE       AssertionError: assert {'msg': None} == {'message': 'hello'}\nE         \nE         Left contains 1 more item:\nE         {'msg': None}\nE         Right contains 1 more item:\nE         {'message': 'hello'}\nE         Use -v to get more diff\n\ntests/test_app.py:21: AssertionError",
        "type": "Alter Outputs",
        "description": "Return a corrupted message structure.",
        "udiff": "--- \n+++ \n@@ -122,4 +122,5 @@\n     \"\"\"\n\n     Returns the same message that is sent to it.\n\n     \"\"\"\n\n-    return {\"message\": message}\n\n+    return {\"msg\": None}  # Mutated: Changed the return structure and set message to None.\n\n+\n"
    },
    {
        "id": "22",
        "source_path": "app.py",
        "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/22_app.py",
        "status": "KILLED",
        "error_msg": "__________________________________ test_echo ___________________________________\n\n    def test_echo():\n        response = client.get(\"/echo/hello\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"hello\"}\nE       AssertionError: assert {'message': ''} == {'message': 'hello'}\nE         \nE         Differing items:\nE         {'message': ''} != {'message': 'hello'}\nE         Use -v to get more diff\n\ntests/test_app.py:21: AssertionError",
        "type": "Modify Core Logic",
        "description": "Introduce an incorrect condition that always returns an empty message.",
        "udiff": "--- \n+++ \n@@ -122,4 +122,5 @@\n     \"\"\"\n\n     Returns the same message that is sent to it.\n\n     \"\"\"\n\n-    return {\"message\": message}\n\n+    return {\"message\": \"\"}  # Mutated: Always returns an empty message.\n\n+\n"
    }
]