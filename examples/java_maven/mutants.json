[
  {
    "id": "1",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/1_BankAccount.java",
    "status": "KILLED",
    "error_msg": "[INFO] Scanning for projects...\n[INFO] \n[INFO] --------------------------< com.example:demo >--------------------------\n[INFO] Building demo 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ demo ---\n[INFO] argLine set to -javaagent:/Users/taikorind/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/target/jacoco.exec\n[INFO] \n[INFO] --- resources:3.3.1:resources (default-resources) @ demo ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] Copying 0 resource from src/main/resources to target/classes\n[INFO] \n[INFO] --- compiler:3.13.0:compile (default-compile) @ demo ---\n[INFO] Recompiling the module because of changed source code.\n[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\n[INFO] Compiling 1 source file with javac [debug target 17] to target/classes\n[INFO] -------------------------------------------------------------\n[WARNING] COMPILATION WARNING : \n[INFO] -------------------------------------------------------------\n[WARNING] location of system modules is not set in conjunction with -source 17\n  not setting the location of system modules may lead to class files that cannot run on JDK 17\n    --release 17 is recommended instead of -source 17 -target 17 because it sets the location of system modules automatically\n[INFO] 1 warning\n[INFO] -------------------------------------------------------------\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n[ERROR] /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/src/main/java/com/example/BankAccount.java:[23,16] incompatible types: <nulltype> cannot be converted to double\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  0.701 s\n[INFO] Finished at: 2024-07-21T00:00:47-04:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.13.0:compile (default-compile) on project demo: Compilation failure\n[ERROR] /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/src/main/java/com/example/BankAccount.java:[23,16] incompatible types: <nulltype> cannot be converted to double\n[ERROR] \n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
    "type": "Alter Outputs",
    "description": "Changed the return value to null, which corrupts the expected output of the method.",
    "udiff": "--- \n+++ \n@@ -20,7 +20,7 @@\n     }\n\n \n\n     public double getBalance() {\n\n-        return balance;\n\n+        return null; // Mutation: returning null instead of balance\n\n     }\n\n \n\n     public List<String> getTransactionHistory() {\n"
  },
  {
    "id": "2",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/2_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 5, Errors: 0, Skipped: 0, Time elapsed: 0.041 s <<< FAILURE! - in BankAccountTest\n[ERROR] testApplyAnnualInterest  Time elapsed: 0.007 s  <<< FAILURE!",
    "type": "Modify Core Logic",
    "description": "Introduced an incorrect condition that causes the method to return a negative balance.",
    "udiff": "--- \n+++ \n@@ -20,7 +20,7 @@\n     }\n\n \n\n     public double getBalance() {\n\n-        return balance;\n\n+        return -balance; // Mutation: returning negative balance\n\n     }\n\n \n\n     public List<String> getTransactionHistory() {\n"
  },
  {
    "id": "3",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/3_BankAccount.java",
    "status": "KILLED",
    "error_msg": "[INFO] Scanning for projects...\n[INFO] \n[INFO] --------------------------< com.example:demo >--------------------------\n[INFO] Building demo 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ demo ---\n[INFO] argLine set to -javaagent:/Users/taikorind/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/target/jacoco.exec\n[INFO] \n[INFO] --- resources:3.3.1:resources (default-resources) @ demo ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] Copying 0 resource from src/main/resources to target/classes\n[INFO] \n[INFO] --- compiler:3.13.0:compile (default-compile) @ demo ---\n[INFO] Recompiling the module because of changed source code.\n[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\n[INFO] Compiling 1 source file with javac [debug target 17] to target/classes\n[WARNING] location of system modules is not set in conjunction with -source 17\n  not setting the location of system modules may lead to class files that cannot run on JDK 17\n    --release 17 is recommended instead of -source 17 -target 17 because it sets the location of system modules automatically\n[INFO] \n[INFO] --- resources:3.3.1:testResources (default-testResources) @ demo ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/src/test/resources\n[INFO] \n[INFO] --- compiler:3.13.0:testCompile (default-testCompile) @ demo ---\n[INFO] Recompiling the module because of changed dependency.\n[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\n[INFO] Compiling 1 source file with javac [debug target 17] to target/test-classes\n[WARNING] location of system modules is not set in conjunction with -source 17\n  not setting the location of system modules may lead to class files that cannot run on JDK 17\n    --release 17 is recommended instead of -source 17 -target 17 because it sets the location of system modules automatically\n[INFO] \n[INFO] --- surefire:2.22.2:test (default-test) @ demo ---\n[INFO] \n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running BankAccountTest\n[ERROR] Tests run: 12, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.039 s <<< FAILURE! - in BankAccountTest\n[ERROR] testScheduleTransaction  Time elapsed: 0.016 s  <<< ERROR!\njava.lang.NullPointerException: Cannot invoke \"java.util.List.contains(Object)\" because the return value of \"com.example.BankAccount.getTransactionHistory()\" is null\n\tat BankAccountTest.testScheduleTransaction(BankAccountTest.java:57)\n\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Errors: \n[ERROR]   BankAccountTest.testScheduleTransaction:57 NullPointer Cannot invoke \"java.uti...\n[INFO] \n[ERROR] Tests run: 12, Failures: 0, Errors: 1, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  1.800 s\n[INFO] Finished at: 2024-07-21T00:00:55-04:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project demo: There are test failures.\n[ERROR] \n[ERROR] Please refer to /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
    "type": "Alter Outputs",
    "description": "Changed the return value to null, which may lead to NullPointerExceptions when the caller expects a List.",
    "udiff": "--- \n+++ \n@@ -24,7 +24,7 @@\n     }\n\n \n\n     public List<String> getTransactionHistory() {\n\n-        return transactionHistory;\n\n+        return null; // Mutation: returning null instead of the transaction history list.\n\n     }\n\n \n\n     public void deposit(double amount) {\n"
  },
  {
    "id": "4",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/4_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.034 s <<< FAILURE! - in BankAccountTest\n[ERROR] testScheduleTransaction  Time elapsed: 0.012 s  <<< FAILURE!",
    "type": "Data Corruption",
    "description": "Modified the return value to return an empty list instead of the actual transaction history, leading to data inconsistency.",
    "udiff": "--- \n+++ \n@@ -24,7 +24,7 @@\n     }\n\n \n\n     public List<String> getTransactionHistory() {\n\n-        return transactionHistory;\n\n+        return new ArrayList<>(); // Mutation: returning an empty list instead of the transaction history.\n\n     }\n\n \n\n     public void deposit(double amount) {\n"
  },
  {
    "id": "5",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/5_BankAccount.java",
    "status": "SURVIVED",
    "error_msg": "",
    "type": "Conditional Statement Modification",
    "description": "Changed the condition to allow non-positive deposit amounts, which will lead to incorrect balance updates.",
    "udiff": "--- \n+++ \n@@ -28,7 +28,7 @@\n     }\n\n \n\n     public void deposit(double amount) {\n\n-        if (amount <= 0) {\n\n+        if (amount < 0) { // Mutation: allows zero deposit, leading to incorrect behavior\n\n             throw new IllegalArgumentException(\"Deposit amount must be positive\");\n\n         }\n\n         balance += amount;\n"
  },
  {
    "id": "6",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/6_BankAccount.java",
    "status": "SURVIVED",
    "error_msg": "",
    "type": "Data Corruption",
    "description": "Altered the transaction history entry to include a negative deposit, corrupting the transaction log.",
    "udiff": "--- \n+++ \n@@ -32,7 +32,7 @@\n             throw new IllegalArgumentException(\"Deposit amount must be positive\");\n\n         }\n\n         balance += amount;\n\n-        transactionHistory.add(\"Deposited: \" + amount);\n\n+        transactionHistory.add(\"Deposited: \" + (-amount)); // Mutation: logs negative deposit\n\n     }\n\n \n\n     public void withdraw(double amount) {\n"
  },
  {
    "id": "7",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/7_BankAccount.java",
    "status": "SURVIVED",
    "error_msg": "",
    "type": "Conditional Statement Modification",
    "description": "Changed the condition to allow withdrawal of negative amounts, which should not be permitted.",
    "udiff": "--- \n+++ \n@@ -36,7 +36,7 @@\n     }\n\n \n\n     public void withdraw(double amount) {\n\n-        if (amount <= 0) {\n\n+        if (amount < 0) { // Mutation: Allow negative withdrawal amounts\n\n             throw new IllegalArgumentException(\"Withdrawal amount must be positive\");\n\n         }\n\n         if (amount > balance + overdraftLimit) {\n"
  },
  {
    "id": "8",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/8_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.032 s <<< FAILURE! - in BankAccountTest\n[ERROR] testWithdraw  Time elapsed: 0.005 s  <<< FAILURE!",
    "type": "Return Value Alteration",
    "description": "Changed the balance update logic to return a negative balance, which is incorrect.",
    "udiff": "--- \n+++ \n@@ -42,7 +42,7 @@\n         if (amount > balance + overdraftLimit) {\n\n             throw new IllegalArgumentException(\"Insufficient funds, including overdraft limit\");\n\n         }\n\n-        balance -= amount;\n\n+        balance += amount; // Mutation: Incorrectly adds amount to balance instead of subtracting\n\n         transactionHistory.add(\"Withdrew: \" + amount);\n\n     }\n\n \n"
  },
  {
    "id": "9",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/9_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.033 s <<< FAILURE! - in BankAccountTest\n[ERROR] testApplyZeroInterestRate  Time elapsed: 0.005 s  <<< FAILURE!",
    "type": "Conditional Statement Mutation",
    "description": "Changed the condition to allow non-positive interest rates, which could lead to incorrect calculations.",
    "udiff": "--- \n+++ \n@@ -47,7 +47,7 @@\n     }\n\n \n\n     public void applyAnnualInterest(double interestRate) {\n\n-        if (interestRate <= 0) {\n\n+        if (interestRate < 0) { // Mutation: allows zero interest rate\n\n             throw new IllegalArgumentException(\"Interest rate must be positive\");\n\n         }\n\n         double interest = balance * (interestRate / 100);\n"
  },
  {
    "id": "10",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/10_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.033 s <<< FAILURE! - in BankAccountTest\n[ERROR] testApplyAnnualInterest  Time elapsed: 0.006 s  <<< FAILURE!",
    "type": "Calculation Mutation",
    "description": "Introduced an off-by-one error in the interest calculation, leading to incorrect balance updates.",
    "udiff": "--- \n+++ \n@@ -50,7 +50,7 @@\n         if (interestRate <= 0) {\n\n             throw new IllegalArgumentException(\"Interest rate must be positive\");\n\n         }\n\n-        double interest = balance * (interestRate / 100);\n\n+        double interest = balance * (interestRate / 101); // Mutation: incorrect interest calculation\n\n         balance += interest;\n\n         transactionHistory.add(\"Interest applied: \" + interest);\n\n     }\n"
  },
  {
    "id": "11",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/11_BankAccount.java",
    "status": "KILLED",
    "error_msg": "[INFO] Scanning for projects...\n[INFO] \n[INFO] --------------------------< com.example:demo >--------------------------\n[INFO] Building demo 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ demo ---\n[INFO] argLine set to -javaagent:/Users/taikorind/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/target/jacoco.exec\n[INFO] \n[INFO] --- resources:3.3.1:resources (default-resources) @ demo ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\n[INFO] Copying 0 resource from src/main/resources to target/classes\n[INFO] \n[INFO] --- compiler:3.13.0:compile (default-compile) @ demo ---\n[INFO] Recompiling the module because of changed source code.\n[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\n[INFO] Compiling 1 source file with javac [debug target 17] to target/classes\n[INFO] -------------------------------------------------------------\n[WARNING] COMPILATION WARNING : \n[INFO] -------------------------------------------------------------\n[WARNING] location of system modules is not set in conjunction with -source 17\n  not setting the location of system modules may lead to class files that cannot run on JDK 17\n    --release 17 is recommended instead of -source 17 -target 17 because it sets the location of system modules automatically\n[INFO] 1 warning\n[INFO] -------------------------------------------------------------\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n[ERROR] /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/src/main/java/com/example/BankAccount.java:[60,13] unreachable statement\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  0.618 s\n[INFO] Finished at: 2024-07-21T00:01:27-04:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.13.0:compile (default-compile) on project demo: Compilation failure\n[ERROR] /Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/src/main/java/com/example/BankAccount.java:[60,13] unreachable statement\n[ERROR] \n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
    "type": "Loop Logic Mutation",
    "description": "Altered the loop condition to create an infinite loop by removing the termination condition.",
    "udiff": "--- \n+++ \n@@ -56,7 +56,7 @@\n     }\n\n \n\n     public void executeBatchTransactions(double[] deposits, double[] withdrawals) {\n\n-        for (double deposit : deposits) {\n\n+        for (double deposit : deposits) { while(true) {} // Infinite loop introduced\n\n             deposit(deposit);\n\n         }\n\n         for (double withdrawal : withdrawals) {\n"
  },
  {
    "id": "12",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/12_BankAccount.java",
    "status": "SURVIVED",
    "error_msg": "",
    "type": "Exception Injection",
    "description": "Introduced a potential NullPointerException by not checking if deposits or withdrawals are null before processing.",
    "udiff": "--- \n+++ \n@@ -56,7 +56,7 @@\n     }\n\n \n\n     public void executeBatchTransactions(double[] deposits, double[] withdrawals) {\n\n-        for (double deposit : deposits) {\n\n+        for (double deposit : deposits) { if (deposits == null) throw new NullPointerException(); // Null check bypassed\n\n             deposit(deposit);\n\n         }\n\n         for (double withdrawal : withdrawals) {\n"
  },
  {
    "id": "13",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/13_BankAccount.java",
    "status": "SURVIVED",
    "error_msg": "",
    "type": "Conditional Statement Modification",
    "description": "Changed the condition to allow negative days from now, which could lead to scheduling errors.",
    "udiff": "--- \n+++ \n@@ -66,7 +66,7 @@\n     }\n\n \n\n     public void scheduleTransaction(String type, double amount, int daysFromNow) {\n\n-        if (daysFromNow < 0) {\n\n+        if (daysFromNow <= 0) { // Mutation: allows scheduling for today or in the past\n\n             throw new IllegalArgumentException(\"Days from now must be non-negative\");\n\n         }\n\n         // This is a simplification; in a real system, you would have a scheduler.\n"
  },
  {
    "id": "14",
    "source_path": "src/main/java/com/example/BankAccount.java",
    "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/java_maven/logs/_latest/mutants/14_BankAccount.java",
    "status": "KILLED",
    "error_msg": "Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.032 s <<< FAILURE! - in BankAccountTest\n[ERROR] testScheduleTransaction  Time elapsed: 0.011 s  <<< FAILURE!",
    "type": "Data Corruption",
    "description": "Altered the transaction history entry to include incorrect data format.",
    "udiff": "--- \n+++ \n@@ -71,6 +71,6 @@\n         }\n\n         // This is a simplification; in a real system, you would have a scheduler.\n\n         // We'll just log the scheduled transaction for demonstration purposes.\n\n-        transactionHistory.add(\"Scheduled \" + type + \" of \" + amount + \" in \" + daysFromNow + \" days\");\n\n+        transactionHistory.add(\"Scheduled \" + type + \" of \" + (amount * 2) + \" in \" + daysFromNow + \" days\"); // Mutation: doubled the amount\n\n     }\n\n }\n"
  }
]
